{"ast":null,"code":"import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n  __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 46);\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(47);\n    }\n\n    return definition;\n  });\n  __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 48);\n  return doc;\n}\nexport function getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nexport function getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nexport function getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nexport function getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 49);\n  return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n  __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 50);\n  __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 51);\n  var fragmentDef = doc.definitions[0];\n  __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 52);\n  return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(53);\n}\nexport function getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n\n  return defaultValues;\n}","map":{"version":3,"names":["invariant","InvariantError","valueToObjectRepresentation","checkDocument","doc","__DEV__","kind","operations","definitions","filter","d","map","definition","concat","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","_a","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","variable"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@apollo/client/utilities/graphql/getFromAST.js"],"sourcesContent":["import { invariant, InvariantError } from \"../globals/index.js\";\nimport { valueToObjectRepresentation } from \"./storeUtils.js\";\nexport function checkDocument(doc) {\n    __DEV__ ? invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc && doc.kind === 'Document', 46);\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\".concat(definition.kind, \"\\\"\")) : new InvariantError(47);\n        }\n        return definition;\n    });\n    __DEV__ ? invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \".concat(operations.length, \" operations\")) : invariant(operations.length <= 1, 48);\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    __DEV__ ? invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.') : invariant(queryDef && queryDef.operation === 'query', 49);\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    __DEV__ ? invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\") : invariant(doc.kind === 'Document', 50);\n    __DEV__ ? invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.') : invariant(doc.definitions.length <= 1, 51);\n    var fragmentDef = doc.definitions[0];\n    __DEV__ ? invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.') : invariant(fragmentDef.kind === 'FragmentDefinition', 52);\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw __DEV__ ? new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.') : new InvariantError(53);\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}