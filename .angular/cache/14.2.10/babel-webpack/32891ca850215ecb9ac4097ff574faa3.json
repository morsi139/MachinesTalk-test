{"ast":null,"code":"import { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n  return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n  return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n  return isExecutionPatchIncrementalResult(value) || isExecutionPatchInitialResult(value);\n}\nexport function mergeIncrementalData(prevResult, result) {\n  var mergedData = prevResult;\n  var merger = new DeepMerger();\n\n  if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n    result.incremental.forEach(function (_a) {\n      var data = _a.data,\n          path = _a.path;\n\n      for (var i = path.length - 1; i >= 0; --i) {\n        var key = path[i];\n        var isNumericKey = !isNaN(+key);\n        var parent_1 = isNumericKey ? [] : {};\n        parent_1[key] = data;\n        data = parent_1;\n      }\n\n      mergedData = merger.merge(mergedData, data);\n    });\n  }\n\n  return mergedData;\n}","map":{"version":3,"names":["isNonEmptyArray","DeepMerger","isExecutionPatchIncrementalResult","value","isExecutionPatchInitialResult","isExecutionPatchResult","mergeIncrementalData","prevResult","result","mergedData","merger","incremental","forEach","_a","data","path","i","length","key","isNumericKey","isNaN","parent_1","merge"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@apollo/client/utilities/common/incrementalResult.js"],"sourcesContent":["import { isNonEmptyArray } from \"./arrays.js\";\nimport { DeepMerger } from \"./mergeDeep.js\";\nexport function isExecutionPatchIncrementalResult(value) {\n    return \"incremental\" in value;\n}\nexport function isExecutionPatchInitialResult(value) {\n    return \"hasNext\" in value && \"data\" in value;\n}\nexport function isExecutionPatchResult(value) {\n    return (isExecutionPatchIncrementalResult(value) ||\n        isExecutionPatchInitialResult(value));\n}\nexport function mergeIncrementalData(prevResult, result) {\n    var mergedData = prevResult;\n    var merger = new DeepMerger();\n    if (isExecutionPatchIncrementalResult(result) &&\n        isNonEmptyArray(result.incremental)) {\n        result.incremental.forEach(function (_a) {\n            var data = _a.data, path = _a.path;\n            for (var i = path.length - 1; i >= 0; --i) {\n                var key = path[i];\n                var isNumericKey = !isNaN(+key);\n                var parent_1 = isNumericKey ? [] : {};\n                parent_1[key] = data;\n                data = parent_1;\n            }\n            mergedData = merger.merge(mergedData, data);\n        });\n    }\n    return mergedData;\n}\n"],"mappings":"AAAA,SAASA,eAAT,QAAgC,aAAhC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAO,SAASC,iCAAT,CAA2CC,KAA3C,EAAkD;EACrD,OAAO,iBAAiBA,KAAxB;AACH;AACD,OAAO,SAASC,6BAAT,CAAuCD,KAAvC,EAA8C;EACjD,OAAO,aAAaA,KAAb,IAAsB,UAAUA,KAAvC;AACH;AACD,OAAO,SAASE,sBAAT,CAAgCF,KAAhC,EAAuC;EAC1C,OAAQD,iCAAiC,CAACC,KAAD,CAAjC,IACJC,6BAA6B,CAACD,KAAD,CADjC;AAEH;AACD,OAAO,SAASG,oBAAT,CAA8BC,UAA9B,EAA0CC,MAA1C,EAAkD;EACrD,IAAIC,UAAU,GAAGF,UAAjB;EACA,IAAIG,MAAM,GAAG,IAAIT,UAAJ,EAAb;;EACA,IAAIC,iCAAiC,CAACM,MAAD,CAAjC,IACAR,eAAe,CAACQ,MAAM,CAACG,WAAR,CADnB,EACyC;IACrCH,MAAM,CAACG,WAAP,CAAmBC,OAAnB,CAA2B,UAAUC,EAAV,EAAc;MACrC,IAAIC,IAAI,GAAGD,EAAE,CAACC,IAAd;MAAA,IAAoBC,IAAI,GAAGF,EAAE,CAACE,IAA9B;;MACA,KAAK,IAAIC,CAAC,GAAGD,IAAI,CAACE,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsC,EAAEA,CAAxC,EAA2C;QACvC,IAAIE,GAAG,GAAGH,IAAI,CAACC,CAAD,CAAd;QACA,IAAIG,YAAY,GAAG,CAACC,KAAK,CAAC,CAACF,GAAF,CAAzB;QACA,IAAIG,QAAQ,GAAGF,YAAY,GAAG,EAAH,GAAQ,EAAnC;QACAE,QAAQ,CAACH,GAAD,CAAR,GAAgBJ,IAAhB;QACAA,IAAI,GAAGO,QAAP;MACH;;MACDZ,UAAU,GAAGC,MAAM,CAACY,KAAP,CAAab,UAAb,EAAyBK,IAAzB,CAAb;IACH,CAVD;EAWH;;EACD,OAAOL,UAAP;AACH"},"metadata":{},"sourceType":"module"}