{"ast":null,"code":"import _asyncToGenerator from \"F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport { assertValidExecutionArguments, buildExecutionContext, buildResolveInfo, execute, getFieldDef } from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport function subscribe(_x) {\n  return _subscribe.apply(this, arguments);\n}\n\nfunction _subscribe() {\n  _subscribe = _asyncToGenerator(function* (args) {\n    // Temporary for v15 to v16 migration. Remove in v17\n    arguments.length < 2 || devAssert(false, 'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.');\n    const resultOrStream = yield createSourceEventStream(args);\n\n    if (!isAsyncIterable(resultOrStream)) {\n      return resultOrStream;\n    } // For each payload yielded from a subscription, map it over the normal\n    // GraphQL `execute` function, with `payload` as the rootValue.\n    // This implements the \"MapSourceToResponseEvent\" algorithm described in\n    // the GraphQL specification. The `execute` function provides the\n    // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n    // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n\n    const mapSourceToResponse = payload => execute({ ...args,\n      rootValue: payload\n    }); // Map every source value to a ExecutionResult value as described above.\n\n\n    return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n  });\n  return _subscribe.apply(this, arguments);\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6]\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\n\nexport function createSourceEventStream() {\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction _createSourceEventStream() {\n  _createSourceEventStream = _asyncToGenerator(function* (...rawArgs) {\n    const args = toNormalizedArgs(rawArgs);\n    const {\n      schema,\n      document,\n      variableValues\n    } = args; // If arguments are missing or incorrectly typed, this is an internal\n    // developer mistake which should throw an early error.\n\n    assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n    // a \"Response\" with only errors is returned.\n\n    const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n    if (!('schema' in exeContext)) {\n      return {\n        errors: exeContext\n      };\n    }\n\n    try {\n      const eventStream = yield executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n      if (!isAsyncIterable(eventStream)) {\n        throw new Error('Subscription field must return Async Iterable. ' + `Received: ${inspect(eventStream)}.`);\n      }\n\n      return eventStream;\n    } catch (error) {\n      // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n      // Otherwise treat the error as a system-class error and re-throw it.\n      if (error instanceof GraphQLError) {\n        return {\n          errors: [error]\n        };\n      }\n\n      throw error;\n    }\n  });\n  return _createSourceEventStream.apply(this, arguments);\n}\n\nfunction executeSubscription(_x2) {\n  return _executeSubscription.apply(this, arguments);\n}\n\nfunction _executeSubscription() {\n  _executeSubscription = _asyncToGenerator(function* (exeContext) {\n    const {\n      schema,\n      fragments,\n      operation,\n      variableValues,\n      rootValue\n    } = exeContext;\n    const rootType = schema.getSubscriptionType();\n\n    if (rootType == null) {\n      throw new GraphQLError('Schema is not configured to execute subscription operation.', {\n        nodes: operation\n      });\n    }\n\n    const rootFields = collectFields(schema, fragments, variableValues, rootType, operation.selectionSet);\n    const [responseName, fieldNodes] = [...rootFields.entries()][0];\n    const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n    if (!fieldDef) {\n      const fieldName = fieldNodes[0].name.value;\n      throw new GraphQLError(`The subscription field \"${fieldName}\" is not defined.`, {\n        nodes: fieldNodes\n      });\n    }\n\n    const path = addPath(undefined, responseName, rootType.name);\n    const info = buildResolveInfo(exeContext, fieldDef, fieldNodes, rootType, path);\n\n    try {\n      var _fieldDef$subscribe; // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n      // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n      // Build a JS object of arguments from the field.arguments AST, using the\n      // variables scope to fulfill any variable references.\n\n\n      const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n      // is provided to every resolve function within an execution. It is commonly\n      // used to represent an authenticated user, or request-specific caches.\n\n      const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n      // AsyncIterable yielding raw payloads.\n\n      const resolveFn = (_fieldDef$subscribe = fieldDef.subscribe) !== null && _fieldDef$subscribe !== void 0 ? _fieldDef$subscribe : exeContext.subscribeFieldResolver;\n      const eventStream = yield resolveFn(rootValue, args, contextValue, info);\n\n      if (eventStream instanceof Error) {\n        throw eventStream;\n      }\n\n      return eventStream;\n    } catch (error) {\n      throw locatedError(error, fieldNodes, pathToArray(path));\n    }\n  });\n  return _executeSubscription.apply(this, arguments);\n}","map":{"version":3,"names":["devAssert","inspect","isAsyncIterable","addPath","pathToArray","GraphQLError","locatedError","collectFields","assertValidExecutionArguments","buildExecutionContext","buildResolveInfo","execute","getFieldDef","mapAsyncIterator","getArgumentValues","subscribe","args","arguments","length","resultOrStream","createSourceEventStream","mapSourceToResponse","payload","rootValue","toNormalizedArgs","firstArg","schema","document","contextValue","variableValues","operationName","subscribeFieldResolver","rawArgs","exeContext","errors","eventStream","executeSubscription","Error","error","fragments","operation","rootType","getSubscriptionType","nodes","rootFields","selectionSet","responseName","fieldNodes","entries","fieldDef","fieldName","name","value","path","undefined","info","_fieldDef$subscribe","resolveFn"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/graphql/execution/subscribe.mjs"],"sourcesContent":["import { devAssert } from '../jsutils/devAssert.mjs';\nimport { inspect } from '../jsutils/inspect.mjs';\nimport { isAsyncIterable } from '../jsutils/isAsyncIterable.mjs';\nimport { addPath, pathToArray } from '../jsutils/Path.mjs';\nimport { GraphQLError } from '../error/GraphQLError.mjs';\nimport { locatedError } from '../error/locatedError.mjs';\nimport { collectFields } from './collectFields.mjs';\nimport {\n  assertValidExecutionArguments,\n  buildExecutionContext,\n  buildResolveInfo,\n  execute,\n  getFieldDef,\n} from './execute.mjs';\nimport { mapAsyncIterator } from './mapAsyncIterator.mjs';\nimport { getArgumentValues } from './values.mjs';\n/**\n * Implements the \"Subscribe\" algorithm described in the GraphQL specification.\n *\n * Returns a Promise which resolves to either an AsyncIterator (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to an AsyncIterator, which\n * yields a stream of ExecutionResults representing the response stream.\n *\n * Accepts either an object with named arguments, or individual arguments.\n */\n\nexport async function subscribe(args) {\n  // Temporary for v15 to v16 migration. Remove in v17\n  arguments.length < 2 ||\n    devAssert(\n      false,\n      'graphql@16 dropped long-deprecated support for positional arguments, please pass an object instead.',\n    );\n  const resultOrStream = await createSourceEventStream(args);\n\n  if (!isAsyncIterable(resultOrStream)) {\n    return resultOrStream;\n  } // For each payload yielded from a subscription, map it over the normal\n  // GraphQL `execute` function, with `payload` as the rootValue.\n  // This implements the \"MapSourceToResponseEvent\" algorithm described in\n  // the GraphQL specification. The `execute` function provides the\n  // \"ExecuteSubscriptionEvent\" algorithm, as it is nearly identical to the\n  // \"ExecuteQuery\" algorithm, for which `execute` is also used.\n\n  const mapSourceToResponse = (payload) =>\n    execute({ ...args, rootValue: payload }); // Map every source value to a ExecutionResult value as described above.\n\n  return mapAsyncIterator(resultOrStream, mapSourceToResponse);\n}\n\nfunction toNormalizedArgs(args) {\n  const firstArg = args[0];\n\n  if (firstArg && 'document' in firstArg) {\n    return firstArg;\n  }\n\n  return {\n    schema: firstArg,\n    // FIXME: when underlying TS bug fixed, see https://github.com/microsoft/TypeScript/issues/31613\n    document: args[1],\n    rootValue: args[2],\n    contextValue: args[3],\n    variableValues: args[4],\n    operationName: args[5],\n    subscribeFieldResolver: args[6],\n  };\n}\n/**\n * Implements the \"CreateSourceEventStream\" algorithm described in the\n * GraphQL specification, resolving the subscription source event stream.\n *\n * Returns a Promise which resolves to either an AsyncIterable (if successful)\n * or an ExecutionResult (error). The promise will be rejected if the schema or\n * other arguments to this function are invalid, or if the resolved event stream\n * is not an async iterable.\n *\n * If the client-provided arguments to this function do not result in a\n * compliant subscription, a GraphQL Response (ExecutionResult) with\n * descriptive errors and no data will be returned.\n *\n * If the the source stream could not be created due to faulty subscription\n * resolver logic or underlying systems, the promise will resolve to a single\n * ExecutionResult containing `errors` and no `data`.\n *\n * If the operation succeeded, the promise resolves to the AsyncIterable for the\n * event stream returned by the resolver.\n *\n * A Source Event Stream represents a sequence of events, each of which triggers\n * a GraphQL execution for that event.\n *\n * This may be useful when hosting the stateful subscription service in a\n * different process or machine than the stateless GraphQL execution engine,\n * or otherwise separating these two steps. For more on this, see the\n * \"Supporting Subscriptions at Scale\" information in the GraphQL specification.\n */\n\nexport async function createSourceEventStream(...rawArgs) {\n  const args = toNormalizedArgs(rawArgs);\n  const { schema, document, variableValues } = args; // If arguments are missing or incorrectly typed, this is an internal\n  // developer mistake which should throw an early error.\n\n  assertValidExecutionArguments(schema, document, variableValues); // If a valid execution context cannot be created due to incorrect arguments,\n  // a \"Response\" with only errors is returned.\n\n  const exeContext = buildExecutionContext(args); // Return early errors if execution context failed.\n\n  if (!('schema' in exeContext)) {\n    return {\n      errors: exeContext,\n    };\n  }\n\n  try {\n    const eventStream = await executeSubscription(exeContext); // Assert field returned an event stream, otherwise yield an error.\n\n    if (!isAsyncIterable(eventStream)) {\n      throw new Error(\n        'Subscription field must return Async Iterable. ' +\n          `Received: ${inspect(eventStream)}.`,\n      );\n    }\n\n    return eventStream;\n  } catch (error) {\n    // If it GraphQLError, report it as an ExecutionResult, containing only errors and no data.\n    // Otherwise treat the error as a system-class error and re-throw it.\n    if (error instanceof GraphQLError) {\n      return {\n        errors: [error],\n      };\n    }\n\n    throw error;\n  }\n}\n\nasync function executeSubscription(exeContext) {\n  const { schema, fragments, operation, variableValues, rootValue } =\n    exeContext;\n  const rootType = schema.getSubscriptionType();\n\n  if (rootType == null) {\n    throw new GraphQLError(\n      'Schema is not configured to execute subscription operation.',\n      {\n        nodes: operation,\n      },\n    );\n  }\n\n  const rootFields = collectFields(\n    schema,\n    fragments,\n    variableValues,\n    rootType,\n    operation.selectionSet,\n  );\n  const [responseName, fieldNodes] = [...rootFields.entries()][0];\n  const fieldDef = getFieldDef(schema, rootType, fieldNodes[0]);\n\n  if (!fieldDef) {\n    const fieldName = fieldNodes[0].name.value;\n    throw new GraphQLError(\n      `The subscription field \"${fieldName}\" is not defined.`,\n      {\n        nodes: fieldNodes,\n      },\n    );\n  }\n\n  const path = addPath(undefined, responseName, rootType.name);\n  const info = buildResolveInfo(\n    exeContext,\n    fieldDef,\n    fieldNodes,\n    rootType,\n    path,\n  );\n\n  try {\n    var _fieldDef$subscribe;\n\n    // Implements the \"ResolveFieldEventStream\" algorithm from GraphQL specification.\n    // It differs from \"ResolveFieldValue\" due to providing a different `resolveFn`.\n    // Build a JS object of arguments from the field.arguments AST, using the\n    // variables scope to fulfill any variable references.\n    const args = getArgumentValues(fieldDef, fieldNodes[0], variableValues); // The resolve function's optional third argument is a context value that\n    // is provided to every resolve function within an execution. It is commonly\n    // used to represent an authenticated user, or request-specific caches.\n\n    const contextValue = exeContext.contextValue; // Call the `subscribe()` resolver or the default resolver to produce an\n    // AsyncIterable yielding raw payloads.\n\n    const resolveFn =\n      (_fieldDef$subscribe = fieldDef.subscribe) !== null &&\n      _fieldDef$subscribe !== void 0\n        ? _fieldDef$subscribe\n        : exeContext.subscribeFieldResolver;\n    const eventStream = await resolveFn(rootValue, args, contextValue, info);\n\n    if (eventStream instanceof Error) {\n      throw eventStream;\n    }\n\n    return eventStream;\n  } catch (error) {\n    throw locatedError(error, fieldNodes, pathToArray(path));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}