{"ast":null,"code":"import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n  var body = response;\n  if (isNodeResponse(response)) body = response.body;\n  if (isAsyncIterableIterator(body)) return asyncIterator(body);\n  if (isReadableStream(body)) return readerIterator(body.getReader());\n\n  if (isStreamableBlob(body)) {\n    return readerIterator(body.stream().getReader());\n  }\n\n  if (isBlob(body)) return promiseIterator(body.arrayBuffer());\n  if (isNodeReadableStream(body)) return nodeStreamIterator(body);\n  throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}","map":{"version":3,"names":["isAsyncIterableIterator","isBlob","isNodeResponse","isNodeReadableStream","isReadableStream","isStreamableBlob","asyncIterator","nodeStreamIterator","promiseIterator","readerIterator","responseIterator","response","body","getReader","stream","arrayBuffer","Error"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@apollo/client/link/http/responseIterator.js"],"sourcesContent":["import { isAsyncIterableIterator, isBlob, isNodeResponse, isNodeReadableStream, isReadableStream, isStreamableBlob, } from \"../../utilities/common/responseIterator.js\";\nimport asyncIterator from \"./iterators/async.js\";\nimport nodeStreamIterator from \"./iterators/nodeStream.js\";\nimport promiseIterator from \"./iterators/promise.js\";\nimport readerIterator from \"./iterators/reader.js\";\nexport function responseIterator(response) {\n    var body = response;\n    if (isNodeResponse(response))\n        body = response.body;\n    if (isAsyncIterableIterator(body))\n        return asyncIterator(body);\n    if (isReadableStream(body))\n        return readerIterator(body.getReader());\n    if (isStreamableBlob(body)) {\n        return readerIterator(body.stream().getReader());\n    }\n    if (isBlob(body))\n        return promiseIterator(body.arrayBuffer());\n    if (isNodeReadableStream(body))\n        return nodeStreamIterator(body);\n    throw new Error(\"Unknown body type for responseIterator. Please pass a streamable response.\");\n}\n"],"mappings":"AAAA,SAASA,uBAAT,EAAkCC,MAAlC,EAA0CC,cAA1C,EAA0DC,oBAA1D,EAAgFC,gBAAhF,EAAkGC,gBAAlG,QAA2H,4CAA3H;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,kBAAP,MAA+B,2BAA/B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAO,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;EACvC,IAAIC,IAAI,GAAGD,QAAX;EACA,IAAIT,cAAc,CAACS,QAAD,CAAlB,EACIC,IAAI,GAAGD,QAAQ,CAACC,IAAhB;EACJ,IAAIZ,uBAAuB,CAACY,IAAD,CAA3B,EACI,OAAON,aAAa,CAACM,IAAD,CAApB;EACJ,IAAIR,gBAAgB,CAACQ,IAAD,CAApB,EACI,OAAOH,cAAc,CAACG,IAAI,CAACC,SAAL,EAAD,CAArB;;EACJ,IAAIR,gBAAgB,CAACO,IAAD,CAApB,EAA4B;IACxB,OAAOH,cAAc,CAACG,IAAI,CAACE,MAAL,GAAcD,SAAd,EAAD,CAArB;EACH;;EACD,IAAIZ,MAAM,CAACW,IAAD,CAAV,EACI,OAAOJ,eAAe,CAACI,IAAI,CAACG,WAAL,EAAD,CAAtB;EACJ,IAAIZ,oBAAoB,CAACS,IAAD,CAAxB,EACI,OAAOL,kBAAkB,CAACK,IAAD,CAAzB;EACJ,MAAM,IAAII,KAAJ,CAAU,4EAAV,CAAN;AACH"},"metadata":{},"sourceType":"module"}