{"ast":null,"code":"// This currentContext variable will only be used if the makeSlotClass\n// function is called, which happens only if this is the first copy of the\n// @wry/context package to be imported.\nvar currentContext = null; // This unique internal object is used to denote the absence of a value\n// for a given Slot, and is never exposed to outside code.\n\nvar MISSING_VALUE = {};\nvar idCounter = 1; // Although we can't do anything about the cost of duplicated code from\n// accidentally bundling multiple copies of the @wry/context package, we can\n// avoid creating the Slot class more than once using makeSlotClass.\n\nvar makeSlotClass = function () {\n  return (\n    /** @class */\n    function () {\n      function Slot() {\n        // If you have a Slot object, you can find out its slot.id, but you cannot\n        // guess the slot.id of a Slot you don't have access to, thanks to the\n        // randomized suffix.\n        this.id = [\"slot\", idCounter++, Date.now(), Math.random().toString(36).slice(2)].join(\":\");\n      }\n\n      Slot.prototype.hasValue = function () {\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\n          // We use the Slot object iself as a key to its value, which means the\n          // value cannot be obtained without a reference to the Slot object.\n          if (this.id in context_1.slots) {\n            var value = context_1.slots[this.id];\n            if (value === MISSING_VALUE) break;\n\n            if (context_1 !== currentContext) {\n              // Cache the value in currentContext.slots so the next lookup will\n              // be faster. This caching is safe because the tree of contexts and\n              // the values of the slots are logically immutable.\n              currentContext.slots[this.id] = value;\n            }\n\n            return true;\n          }\n        }\n\n        if (currentContext) {\n          // If a value was not found for this Slot, it's never going to be found\n          // no matter how many times we look it up, so we might as well cache\n          // the absence of the value, too.\n          currentContext.slots[this.id] = MISSING_VALUE;\n        }\n\n        return false;\n      };\n\n      Slot.prototype.getValue = function () {\n        if (this.hasValue()) {\n          return currentContext.slots[this.id];\n        }\n      };\n\n      Slot.prototype.withValue = function (value, callback, // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        var _a;\n\n        var slots = (_a = {\n          __proto__: null\n        }, _a[this.id] = value, _a);\n        var parent = currentContext;\n        currentContext = {\n          parent: parent,\n          slots: slots\n        };\n\n        try {\n          // Function.prototype.apply allows the arguments array argument to be\n          // omitted or undefined, so args! is fine here.\n          return callback.apply(thisArg, args);\n        } finally {\n          currentContext = parent;\n        }\n      }; // Capture the current context and wrap a callback function so that it\n      // reestablishes the captured context when called.\n\n\n      Slot.bind = function (callback) {\n        var context = currentContext;\n        return function () {\n          var saved = currentContext;\n\n          try {\n            currentContext = context;\n            return callback.apply(this, arguments);\n          } finally {\n            currentContext = saved;\n          }\n        };\n      }; // Immediately run a callback function without any captured context.\n\n\n      Slot.noContext = function (callback, // Given the prevalence of arrow functions, specifying arguments is likely\n      // to be much more common than specifying `this`, hence this ordering:\n      args, thisArg) {\n        if (currentContext) {\n          var saved = currentContext;\n\n          try {\n            currentContext = null; // Function.prototype.apply allows the arguments array argument to be\n            // omitted or undefined, so args! is fine here.\n\n            return callback.apply(thisArg, args);\n          } finally {\n            currentContext = saved;\n          }\n        } else {\n          return callback.apply(thisArg, args);\n        }\n      };\n\n      return Slot;\n    }()\n  );\n};\n\nfunction maybe(fn) {\n  try {\n    return fn();\n  } catch (ignored) {}\n} // We store a single global implementation of the Slot class as a permanent\n// non-enumerable property of the globalThis object. This obfuscation does\n// nothing to prevent access to the Slot class, but at least it ensures the\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\n// of the @wry/context package (hopefully just one) will share the same Slot\n// implementation. Since the first copy of the @wry/context package to be\n// imported wins, this technique imposes a steep cost for any future breaking\n// changes to the Slot class.\n\n\nvar globalKey = \"@wry/context:Slot\";\nvar host = // Prefer globalThis when available.\n// https://github.com/benjamn/wryware/issues/347\nmaybe(function () {\n  return globalThis;\n}) || // Fall back to global, which works in Node.js and may be converted by some\n// bundlers to the appropriate identifier (window, self, ...) depending on the\n// bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\nmaybe(function () {\n  return global;\n}) || // Otherwise, use a dummy host that's local to this module. We used to fall\n// back to using the Array constructor as a namespace, but that was flagged in\n// https://github.com/benjamn/wryware/issues/347, and can be avoided.\nObject.create(null); // Whichever globalHost we're using, make TypeScript happy about the additional\n// globalKey property.\n\nvar globalHost = host;\n\nvar Slot = globalHost[globalKey] || // Earlier versions of this package stored the globalKey property on the Array\n// constructor, so we check there as well, to prevent Slot class duplication.\nArray[globalKey] || function (Slot) {\n  try {\n    Object.defineProperty(globalHost, globalKey, {\n      value: Slot,\n      enumerable: false,\n      writable: false,\n      // When it was possible for globalHost to be the Array constructor (a\n      // legacy Slot dedup strategy), it was important for the property to be\n      // configurable:true so it could be deleted. That does not seem to be as\n      // important when globalHost is the global object, but I don't want to\n      // cause similar problems again, and configurable:true seems safest.\n      // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\n      configurable: true\n    });\n  } finally {\n    return Slot;\n  }\n}(makeSlotClass());\n\nvar bind = Slot.bind,\n    noContext = Slot.noContext;\n\nfunction setTimeoutWithContext(callback, delay) {\n  return setTimeout(bind(callback), delay);\n} // Turn any generator function into an async function (using yield instead\n// of await), with context automatically preserved across yields.\n\n\nfunction asyncFromGen(genFn) {\n  return function () {\n    var gen = genFn.apply(this, arguments);\n    var boundNext = bind(gen.next);\n    var boundThrow = bind(gen.throw);\n    return new Promise(function (resolve, reject) {\n      function invoke(method, argument) {\n        try {\n          var result = method.call(gen, argument);\n        } catch (error) {\n          return reject(error);\n        }\n\n        var next = result.done ? resolve : invokeNext;\n\n        if (isPromiseLike(result.value)) {\n          result.value.then(next, result.done ? reject : invokeThrow);\n        } else {\n          next(result.value);\n        }\n      }\n\n      var invokeNext = function (value) {\n        return invoke(boundNext, value);\n      };\n\n      var invokeThrow = function (error) {\n        return invoke(boundThrow, error);\n      };\n\n      invokeNext();\n    });\n  };\n}\n\nfunction isPromiseLike(value) {\n  return value && typeof value.then === \"function\";\n} // If you use the fibers npm package to implement coroutines in Node.js,\n// you should call this function at least once to ensure context management\n// remains coherent across any yields.\n\n\nvar wrappedFibers = [];\n\nfunction wrapYieldingFiberMethods(Fiber) {\n  // There can be only one implementation of Fiber per process, so this array\n  // should never grow longer than one element.\n  if (wrappedFibers.indexOf(Fiber) < 0) {\n    var wrap = function (obj, method) {\n      var fn = obj[method];\n\n      obj[method] = function () {\n        return noContext(fn, arguments, this);\n      };\n    }; // These methods can yield, according to\n    // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\n\n\n    wrap(Fiber, \"yield\");\n    wrap(Fiber.prototype, \"run\");\n    wrap(Fiber.prototype, \"throwInto\");\n    wrappedFibers.push(Fiber);\n  }\n\n  return Fiber;\n}\n\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };","map":{"version":3,"names":["currentContext","MISSING_VALUE","idCounter","makeSlotClass","Slot","id","Date","now","Math","random","toString","slice","join","prototype","hasValue","context_1","parent","slots","value","getValue","withValue","callback","args","thisArg","_a","__proto__","apply","bind","context","saved","arguments","noContext","maybe","fn","ignored","globalKey","host","globalThis","global","Object","create","globalHost","Array","defineProperty","enumerable","writable","configurable","setTimeoutWithContext","delay","setTimeout","asyncFromGen","genFn","gen","boundNext","next","boundThrow","throw","Promise","resolve","reject","invoke","method","argument","result","call","error","done","invokeNext","isPromiseLike","then","invokeThrow","wrappedFibers","wrapYieldingFiberMethods","Fiber","indexOf","wrap","obj","push"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@wry/context/lib/context.esm.js"],"sourcesContent":["// This currentContext variable will only be used if the makeSlotClass\r\n// function is called, which happens only if this is the first copy of the\r\n// @wry/context package to be imported.\r\nvar currentContext = null;\r\n// This unique internal object is used to denote the absence of a value\r\n// for a given Slot, and is never exposed to outside code.\r\nvar MISSING_VALUE = {};\r\nvar idCounter = 1;\r\n// Although we can't do anything about the cost of duplicated code from\r\n// accidentally bundling multiple copies of the @wry/context package, we can\r\n// avoid creating the Slot class more than once using makeSlotClass.\r\nvar makeSlotClass = function () { return /** @class */ (function () {\r\n    function Slot() {\r\n        // If you have a Slot object, you can find out its slot.id, but you cannot\r\n        // guess the slot.id of a Slot you don't have access to, thanks to the\r\n        // randomized suffix.\r\n        this.id = [\r\n            \"slot\",\r\n            idCounter++,\r\n            Date.now(),\r\n            Math.random().toString(36).slice(2),\r\n        ].join(\":\");\r\n    }\r\n    Slot.prototype.hasValue = function () {\r\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\r\n            // We use the Slot object iself as a key to its value, which means the\r\n            // value cannot be obtained without a reference to the Slot object.\r\n            if (this.id in context_1.slots) {\r\n                var value = context_1.slots[this.id];\r\n                if (value === MISSING_VALUE)\r\n                    break;\r\n                if (context_1 !== currentContext) {\r\n                    // Cache the value in currentContext.slots so the next lookup will\r\n                    // be faster. This caching is safe because the tree of contexts and\r\n                    // the values of the slots are logically immutable.\r\n                    currentContext.slots[this.id] = value;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        if (currentContext) {\r\n            // If a value was not found for this Slot, it's never going to be found\r\n            // no matter how many times we look it up, so we might as well cache\r\n            // the absence of the value, too.\r\n            currentContext.slots[this.id] = MISSING_VALUE;\r\n        }\r\n        return false;\r\n    };\r\n    Slot.prototype.getValue = function () {\r\n        if (this.hasValue()) {\r\n            return currentContext.slots[this.id];\r\n        }\r\n    };\r\n    Slot.prototype.withValue = function (value, callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        var _a;\r\n        var slots = (_a = {\r\n                __proto__: null\r\n            },\r\n            _a[this.id] = value,\r\n            _a);\r\n        var parent = currentContext;\r\n        currentContext = { parent: parent, slots: slots };\r\n        try {\r\n            // Function.prototype.apply allows the arguments array argument to be\r\n            // omitted or undefined, so args! is fine here.\r\n            return callback.apply(thisArg, args);\r\n        }\r\n        finally {\r\n            currentContext = parent;\r\n        }\r\n    };\r\n    // Capture the current context and wrap a callback function so that it\r\n    // reestablishes the captured context when called.\r\n    Slot.bind = function (callback) {\r\n        var context = currentContext;\r\n        return function () {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = context;\r\n                return callback.apply(this, arguments);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        };\r\n    };\r\n    // Immediately run a callback function without any captured context.\r\n    Slot.noContext = function (callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        if (currentContext) {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = null;\r\n                // Function.prototype.apply allows the arguments array argument to be\r\n                // omitted or undefined, so args! is fine here.\r\n                return callback.apply(thisArg, args);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        }\r\n        else {\r\n            return callback.apply(thisArg, args);\r\n        }\r\n    };\r\n    return Slot;\r\n}()); };\r\nfunction maybe(fn) {\r\n    try {\r\n        return fn();\r\n    }\r\n    catch (ignored) { }\r\n}\r\n// We store a single global implementation of the Slot class as a permanent\r\n// non-enumerable property of the globalThis object. This obfuscation does\r\n// nothing to prevent access to the Slot class, but at least it ensures the\r\n// implementation (i.e. currentContext) cannot be tampered with, and all copies\r\n// of the @wry/context package (hopefully just one) will share the same Slot\r\n// implementation. Since the first copy of the @wry/context package to be\r\n// imported wins, this technique imposes a steep cost for any future breaking\r\n// changes to the Slot class.\r\nvar globalKey = \"@wry/context:Slot\";\r\nvar host = \r\n// Prefer globalThis when available.\r\n// https://github.com/benjamn/wryware/issues/347\r\nmaybe(function () { return globalThis; }) ||\r\n    // Fall back to global, which works in Node.js and may be converted by some\r\n    // bundlers to the appropriate identifier (window, self, ...) depending on the\r\n    // bundling target. https://github.com/endojs/endo/issues/576#issuecomment-1178515224\r\n    maybe(function () { return global; }) ||\r\n    // Otherwise, use a dummy host that's local to this module. We used to fall\r\n    // back to using the Array constructor as a namespace, but that was flagged in\r\n    // https://github.com/benjamn/wryware/issues/347, and can be avoided.\r\n    Object.create(null);\r\n// Whichever globalHost we're using, make TypeScript happy about the additional\r\n// globalKey property.\r\nvar globalHost = host;\r\nvar Slot = globalHost[globalKey] ||\r\n    // Earlier versions of this package stored the globalKey property on the Array\r\n    // constructor, so we check there as well, to prevent Slot class duplication.\r\n    Array[globalKey] ||\r\n    (function (Slot) {\r\n        try {\r\n            Object.defineProperty(globalHost, globalKey, {\r\n                value: Slot,\r\n                enumerable: false,\r\n                writable: false,\r\n                // When it was possible for globalHost to be the Array constructor (a\r\n                // legacy Slot dedup strategy), it was important for the property to be\r\n                // configurable:true so it could be deleted. That does not seem to be as\r\n                // important when globalHost is the global object, but I don't want to\r\n                // cause similar problems again, and configurable:true seems safest.\r\n                // https://github.com/endojs/endo/issues/576#issuecomment-1178274008\r\n                configurable: true\r\n            });\r\n        }\r\n        finally {\r\n            return Slot;\r\n        }\r\n    })(makeSlotClass());\n\nvar bind = Slot.bind, noContext = Slot.noContext;\r\nfunction setTimeoutWithContext(callback, delay) {\r\n    return setTimeout(bind(callback), delay);\r\n}\r\n// Turn any generator function into an async function (using yield instead\r\n// of await), with context automatically preserved across yields.\r\nfunction asyncFromGen(genFn) {\r\n    return function () {\r\n        var gen = genFn.apply(this, arguments);\r\n        var boundNext = bind(gen.next);\r\n        var boundThrow = bind(gen.throw);\r\n        return new Promise(function (resolve, reject) {\r\n            function invoke(method, argument) {\r\n                try {\r\n                    var result = method.call(gen, argument);\r\n                }\r\n                catch (error) {\r\n                    return reject(error);\r\n                }\r\n                var next = result.done ? resolve : invokeNext;\r\n                if (isPromiseLike(result.value)) {\r\n                    result.value.then(next, result.done ? reject : invokeThrow);\r\n                }\r\n                else {\r\n                    next(result.value);\r\n                }\r\n            }\r\n            var invokeNext = function (value) { return invoke(boundNext, value); };\r\n            var invokeThrow = function (error) { return invoke(boundThrow, error); };\r\n            invokeNext();\r\n        });\r\n    };\r\n}\r\nfunction isPromiseLike(value) {\r\n    return value && typeof value.then === \"function\";\r\n}\r\n// If you use the fibers npm package to implement coroutines in Node.js,\r\n// you should call this function at least once to ensure context management\r\n// remains coherent across any yields.\r\nvar wrappedFibers = [];\r\nfunction wrapYieldingFiberMethods(Fiber) {\r\n    // There can be only one implementation of Fiber per process, so this array\r\n    // should never grow longer than one element.\r\n    if (wrappedFibers.indexOf(Fiber) < 0) {\r\n        var wrap = function (obj, method) {\r\n            var fn = obj[method];\r\n            obj[method] = function () {\r\n                return noContext(fn, arguments, this);\r\n            };\r\n        };\r\n        // These methods can yield, according to\r\n        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\r\n        wrap(Fiber, \"yield\");\r\n        wrap(Fiber.prototype, \"run\");\r\n        wrap(Fiber.prototype, \"throwInto\");\r\n        wrappedFibers.push(Fiber);\r\n    }\r\n    return Fiber;\r\n}\n\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}