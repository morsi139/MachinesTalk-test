{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\n\nvar delModifier = function () {\n  return DELETE;\n};\n\nvar INVALIDATE = Object.create(null);\n\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n\n    this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n      if (typeof objOrIdOrRef === \"string\") {\n        return makeReference(objOrIdOrRef);\n      }\n\n      if (isReference(objOrIdOrRef)) {\n        return objOrIdOrRef;\n      }\n\n      var id = _this.policies.identify(objOrIdOrRef)[0];\n\n      if (id) {\n        var ref = makeReference(id);\n\n        if (mergeIntoStore) {\n          _this.merge(id, objOrIdOrRef);\n        }\n\n        return ref;\n      }\n    };\n  }\n\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n\n    if (hasOwn.call(this.data, dataId)) {\n      return this.data[dataId];\n    }\n\n    if (this instanceof Layer) {\n      return this.parent.lookup(dataId, dependOnExistence);\n    }\n\n    if (this.policies.rootTypenamesById[dataId]) {\n      return Object.create(null);\n    }\n  };\n\n  EntityStore.prototype.merge = function (older, newer) {\n    var _this = this;\n\n    var dataId;\n    if (isReference(older)) older = older.__ref;\n    if (isReference(newer)) newer = newer.__ref;\n    var existing = typeof older === \"string\" ? this.lookup(dataId = older) : older;\n    var incoming = typeof newer === \"string\" ? this.lookup(dataId = newer) : newer;\n    if (!incoming) return;\n    __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n\n    if (merged !== existing) {\n      delete this.refs[dataId];\n\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[storeFieldName] = 1;\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n\n            if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n              fieldsToDirty_1[fieldName] = 1;\n            }\n\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n\n        if (fieldsToDirty_1.__typename && !(existing && existing.__typename) && this.policies.rootTypenamesById[dataId] === merged.__typename) {\n          delete fieldsToDirty_1.__typename;\n        }\n\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var sharedDetails_1 = {\n        DELETE: DELETE,\n        INVALIDATE: INVALIDATE,\n        isReference: isReference,\n        toReference: this.toReference,\n        canRead: this.canRead,\n        readField: function (fieldNameOrOptions, from) {\n          return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n            fieldName: fieldNameOrOptions,\n            from: from || makeReference(dataId)\n          } : fieldNameOrOptions, {\n            store: _this\n          });\n        }\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            storage: _this.getStorage(dataId, storeFieldName)\n          }));\n\n          if (newValue === INVALIDATE) {\n            _this.group.dirty(dataId, storeFieldName);\n          } else {\n            if (newValue === DELETE) newValue = void 0;\n\n            if (newValue !== fieldValue) {\n              changedFields_1[storeFieldName] = newValue;\n              needToMerge_1 = true;\n              fieldValue = newValue;\n            }\n          }\n        }\n\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n\n          this.group.dirty(dataId, \"__exists\");\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n\n    var storeObject = this.lookup(dataId);\n\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n\n    return false;\n  };\n\n  EntityStore.prototype.evict = function (options, limit) {\n    var evicted = false;\n\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n\n      if (this instanceof Layer && this !== limit) {\n        evicted = this.parent.evict(options, limit) || evicted;\n      }\n\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n\n    return evicted;\n  };\n\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n\n  EntityStore.prototype.extract = function () {\n    var _this = this;\n\n    var obj = this.toObject();\n    var extraRootIds = [];\n    this.getRootIdSet().forEach(function (id) {\n      if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n        extraRootIds.push(id);\n      }\n    });\n\n    if (extraRootIds.length) {\n      obj.__META = {\n        extraRootIds: extraRootIds.sort()\n      };\n    }\n\n    return obj;\n  };\n\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n\n    if (newData) {\n      var __META = newData.__META,\n          rest_1 = __rest(newData, [\"__META\"]);\n\n      Object.keys(rest_1).forEach(function (dataId) {\n        _this.merge(dataId, rest_1[dataId]);\n      });\n\n      if (__META) {\n        __META.extraRootIds.forEach(this.retain, this);\n      }\n    }\n  };\n\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n\n    return 0;\n  };\n\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    } else {\n      Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n    }\n\n    return ids;\n  };\n\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n\n    if (idsToRemove.length) {\n      var root_1 = this;\n\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n\n    return idsToRemove;\n  };\n\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var root = this.data[dataId];\n      if (!root) return found_1;\n      var workSet_1 = new Set([root]);\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        }\n\n        if (isNonNullObject(obj)) {\n          Object.keys(obj).forEach(function (key) {\n            var child = obj[key];\n\n            if (isNonNullObject(child)) {\n              workSet_1.add(child);\n            }\n          });\n        }\n      });\n    }\n\n    return this.refs[dataId];\n  };\n\n  EntityStore.prototype.makeCacheKey = function () {\n    return this.group.keyMaker.lookupArray(arguments);\n  };\n\n  return EntityStore;\n}();\n\nexport { EntityStore };\n\nvar CacheGroup = function () {\n  function CacheGroup(caching, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    this.caching = caching;\n    this.parent = parent;\n    this.d = null;\n    this.resetCaching();\n  }\n\n  CacheGroup.prototype.resetCaching = function () {\n    this.d = this.caching ? dep() : null;\n    this.keyMaker = new Trie(canUseWeakMap);\n  };\n\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n      var fieldName = fieldNameFromStoreName(storeFieldName);\n\n      if (fieldName !== storeFieldName) {\n        this.d(makeDepKey(dataId, fieldName));\n      }\n\n      if (this.parent) {\n        this.parent.depend(dataId, storeFieldName);\n      }\n    }\n  };\n\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n    }\n  };\n\n  return CacheGroup;\n}();\n\nfunction makeDepKey(dataId, storeFieldName) {\n  return storeFieldName + '#' + dataId;\n}\n\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n  if (supportsResultCaching(store)) {\n    store.group.depend(entityId, \"__exists\");\n  }\n}\n\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n\n    function Root(_a) {\n      var policies = _a.policies,\n          _b = _a.resultCaching,\n          resultCaching = _b === void 0 ? true : _b,\n          seed = _a.seed;\n\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n\n      _this.stump = new Stump(_this);\n      _this.storageTrie = new Trie(canUseWeakMap);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n\n    Root.prototype.addLayer = function (layerId, replay) {\n      return this.stump.addLayer(layerId, replay);\n    };\n\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n\n    Root.prototype.getStorage = function () {\n      return this.storageTrie.lookupArray(arguments);\n    };\n\n    return Root;\n  }(EntityStore);\n\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\n\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n\n    var parent = this.parent.removeLayer(layerId);\n\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          var ownStoreObject = _this.data[dataId];\n          var parentStoreObject = parent[\"lookup\"](dataId);\n\n          if (!parentStoreObject) {\n            _this.delete(dataId);\n          } else if (!ownStoreObject) {\n            _this.group.dirty(dataId, \"__exists\");\n\n            Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n              _this.group.dirty(dataId, storeFieldName);\n            });\n          } else if (ownStoreObject !== parentStoreObject) {\n            Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n              if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                _this.group.dirty(dataId, storeFieldName);\n              }\n            });\n          }\n        });\n      }\n\n      return parent;\n    }\n\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n\n  Layer.prototype.getStorage = function () {\n    var p = this.parent;\n\n    while (p.parent) p = p.parent;\n\n    return p.getStorage.apply(p, arguments);\n  };\n\n  return Layer;\n}(EntityStore);\n\nvar Stump = function (_super) {\n  __extends(Stump, _super);\n\n  function Stump(root) {\n    return _super.call(this, \"EntityStore.Stump\", root, function () {}, new CacheGroup(root.group.caching, root.group)) || this;\n  }\n\n  Stump.prototype.removeLayer = function () {\n    return this;\n  };\n\n  Stump.prototype.merge = function () {\n    return this.parent.merge.apply(this.parent, arguments);\n  };\n\n  return Stump;\n}(Layer);\n\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\n\nexport function supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}","map":{"version":3,"names":["__assign","__extends","__rest","invariant","dep","equal","Trie","isReference","makeReference","DeepMerger","maybeDeepFreeze","canUseWeakMap","isNonNullObject","hasOwn","fieldNameFromStoreName","DELETE","Object","create","delModifier","INVALIDATE","EntityStore","policies","group","_this","data","rootIds","refs","getFieldValue","objectOrReference","storeFieldName","get","__ref","canRead","objOrRef","has","toReference","objOrIdOrRef","mergeIntoStore","id","identify","ref","merge","prototype","toObject","dataId","lookup","fieldName","depend","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","older","newer","existing","incoming","__DEV__","merged","storeObjectReconciler","caching","fieldsToDirty_1","__exists","keys","forEach","hasKeyArgs","__typename","dirty","modify","fields","changedFields_1","needToMerge_1","allDeleted_1","sharedDetails_1","readField","fieldNameOrOptions","from","store","fieldValue","newValue","storage","getStorage","delete","args","_a","typename","getStoreFieldName","evict","options","limit","evicted","clear","replace","extract","obj","extraRootIds","getRootIdSet","push","length","__META","sort","newData","rest_1","retain","rootId","release","count","ids","Set","add","gc","snapshot","findChildRefIds","idsToRemove","root_1","found_1","root","workSet_1","key","child","makeCacheKey","keyMaker","lookupArray","arguments","CacheGroup","d","resetCaching","makeDepKey","maybeDependOnExistenceOfEntity","entityId","supportsResultCaching","Root","_super","_b","resultCaching","seed","stump","Stump","storageTrie","addLayer","layerId","replay","removeLayer","ownStoreObject","parentStoreObject","fromParent","p","apply","existingObject","incomingObject","property","existingValue","incomingValue"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@apollo/client/cache/inmemory/entityStore.js"],"sourcesContent":["import { __assign, __extends, __rest } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { dep } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { isReference, makeReference, DeepMerger, maybeDeepFreeze, canUseWeakMap, isNonNullObject, } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName } from \"./helpers.js\";\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar INVALIDATE = Object.create(null);\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (objOrIdOrRef, mergeIntoStore) {\n            if (typeof objOrIdOrRef === \"string\") {\n                return makeReference(objOrIdOrRef);\n            }\n            if (isReference(objOrIdOrRef)) {\n                return objOrIdOrRef;\n            }\n            var id = _this.policies.identify(objOrIdOrRef)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, objOrIdOrRef);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        if (hasOwn.call(this.data, dataId)) {\n            return this.data[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.lookup(dataId, dependOnExistence);\n        }\n        if (this.policies.rootTypenamesById[dataId]) {\n            return Object.create(null);\n        }\n    };\n    EntityStore.prototype.merge = function (older, newer) {\n        var _this = this;\n        var dataId;\n        if (isReference(older))\n            older = older.__ref;\n        if (isReference(newer))\n            newer = newer.__ref;\n        var existing = typeof older === \"string\"\n            ? this.lookup(dataId = older)\n            : older;\n        var incoming = typeof newer === \"string\"\n            ? this.lookup(dataId = newer)\n            : newer;\n        if (!incoming)\n            return;\n        __DEV__ ? invariant(typeof dataId === \"string\", \"store.merge expects a string ID\") : invariant(typeof dataId === \"string\", 1);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[storeFieldName] = 1;\n                        var fieldName = fieldNameFromStoreName(storeFieldName);\n                        if (fieldName !== storeFieldName &&\n                            !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {\n                            fieldsToDirty_1[fieldName] = 1;\n                        }\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                if (fieldsToDirty_1.__typename &&\n                    !(existing && existing.__typename) &&\n                    this.policies.rootTypenamesById[dataId] === merged.__typename) {\n                    delete fieldsToDirty_1.__typename;\n                }\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var sharedDetails_1 = {\n                DELETE: DELETE,\n                INVALIDATE: INVALIDATE,\n                isReference: isReference,\n                toReference: this.toReference,\n                canRead: this.canRead,\n                readField: function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                    fieldName: fieldNameOrOptions,\n                    from: from || makeReference(dataId),\n                } : fieldNameOrOptions, { store: _this }); },\n            };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), { fieldName: fieldName, storeFieldName: storeFieldName, storage: _this.getStorage(dataId, storeFieldName) }));\n                    if (newValue === INVALIDATE) {\n                        _this.group.dirty(dataId, storeFieldName);\n                    }\n                    else {\n                        if (newValue === DELETE)\n                            newValue = void 0;\n                        if (newValue !== fieldValue) {\n                            changedFields_1[storeFieldName] = newValue;\n                            needToMerge_1 = true;\n                            fieldValue = newValue;\n                        }\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options, limit) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer && this !== limit) {\n                evicted = this.parent.evict(options, limit) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.extract = function () {\n        var _this = this;\n        var obj = this.toObject();\n        var extraRootIds = [];\n        this.getRootIdSet().forEach(function (id) {\n            if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {\n                extraRootIds.push(id);\n            }\n        });\n        if (extraRootIds.length) {\n            obj.__META = { extraRootIds: extraRootIds.sort() };\n        }\n        return obj;\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            var __META = newData.__META, rest_1 = __rest(newData, [\"__META\"]);\n            Object.keys(rest_1).forEach(function (dataId) {\n                _this.merge(dataId, rest_1[dataId]);\n            });\n            if (__META) {\n                __META.extraRootIds.forEach(this.retain, this);\n            }\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        else {\n            Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var root = this.data[dataId];\n            if (!root)\n                return found_1;\n            var workSet_1 = new Set([root]);\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                if (isNonNullObject(obj)) {\n                    Object.keys(obj).forEach(function (key) {\n                        var child = obj[key];\n                        if (isNonNullObject(child)) {\n                            workSet_1.add(child);\n                        }\n                    });\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        return this.group.keyMaker.lookupArray(arguments);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching, parent) {\n        if (parent === void 0) { parent = null; }\n        this.caching = caching;\n        this.parent = parent;\n        this.d = null;\n        this.resetCaching();\n    }\n    CacheGroup.prototype.resetCaching = function () {\n        this.d = this.caching ? dep() : null;\n        this.keyMaker = new Trie(canUseWeakMap);\n    };\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n            var fieldName = fieldNameFromStoreName(storeFieldName);\n            if (fieldName !== storeFieldName) {\n                this.d(makeDepKey(dataId, fieldName));\n            }\n            if (this.parent) {\n                this.parent.depend(dataId, storeFieldName);\n            }\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName), storeFieldName === \"__exists\" ? \"forget\" : \"setDirty\");\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return storeFieldName + '#' + dataId;\n}\nexport function maybeDependOnExistenceOfEntity(store, entityId) {\n    if (supportsResultCaching(store)) {\n        store.group.depend(entityId, \"__exists\");\n    }\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.stump = new Stump(_this);\n            _this.storageTrie = new Trie(canUseWeakMap);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return this.stump.addLayer(layerId, replay);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        Root.prototype.getStorage = function () {\n            return this.storageTrie.lookupArray(arguments);\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    var ownStoreObject = _this.data[dataId];\n                    var parentStoreObject = parent[\"lookup\"](dataId);\n                    if (!parentStoreObject) {\n                        _this.delete(dataId);\n                    }\n                    else if (!ownStoreObject) {\n                        _this.group.dirty(dataId, \"__exists\");\n                        Object.keys(parentStoreObject).forEach(function (storeFieldName) {\n                            _this.group.dirty(dataId, storeFieldName);\n                        });\n                    }\n                    else if (ownStoreObject !== parentStoreObject) {\n                        Object.keys(ownStoreObject).forEach(function (storeFieldName) {\n                            if (!equal(ownStoreObject[storeFieldName], parentStoreObject[storeFieldName])) {\n                                _this.group.dirty(dataId, storeFieldName);\n                            }\n                        });\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    Layer.prototype.getStorage = function () {\n        var p = this.parent;\n        while (p.parent)\n            p = p.parent;\n        return p.getStorage.apply(p, arguments);\n    };\n    return Layer;\n}(EntityStore));\nvar Stump = (function (_super) {\n    __extends(Stump, _super);\n    function Stump(root) {\n        return _super.call(this, \"EntityStore.Stump\", root, function () { }, new CacheGroup(root.group.caching, root.group)) || this;\n    }\n    Stump.prototype.removeLayer = function () {\n        return this;\n    };\n    Stump.prototype.merge = function () {\n        return this.parent.merge.apply(this.parent, arguments);\n    };\n    return Stump;\n}(Layer));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}