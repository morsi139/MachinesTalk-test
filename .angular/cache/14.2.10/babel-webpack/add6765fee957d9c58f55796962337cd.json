{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(43);\n    }\n\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  if (typeof actualFragmentName === 'undefined') {\n    __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 44);\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n\n    case 'FragmentSpread':\n      {\n        var fragmentName = selection.name.value;\n\n        if (typeof fragmentMap === \"function\") {\n          return fragmentMap(fragmentName);\n        }\n\n        var fragment = fragmentMap && fragmentMap[fragmentName];\n        __DEV__ ? invariant(fragment, \"No fragment named \".concat(fragmentName)) : invariant(fragment, 45);\n        return fragment || null;\n      }\n\n    default:\n      return null;\n  }\n}","map":{"version":3,"names":["__assign","__spreadArray","invariant","InvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","__DEV__","concat","operation","name","value","push","length","query","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["F:/Bureau/Test_MachinesTalk/MachinesTalk/node_modules/@apollo/client/utilities/graphql/fragments.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw __DEV__ ? new InvariantError(\"Found a \".concat(definition.operation, \" operation\").concat(definition.name ? \" named '\".concat(definition.name.value, \"'\") : '', \". \") +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(43);\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        __DEV__ ? invariant(fragments.length === 1, \"Found \".concat(fragments.length, \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\")) : invariant(fragments.length === 1, 44);\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArray([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions, true) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragmentName = selection.name.value;\n            if (typeof fragmentMap === \"function\") {\n                return fragmentMap(fragmentName);\n            }\n            var fragment = fragmentMap && fragmentMap[fragmentName];\n            __DEV__ ? invariant(fragment, \"No fragment named \".concat(fragmentName)) : invariant(fragment, 45);\n            return fragment || null;\n        }\n        default:\n            return null;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}